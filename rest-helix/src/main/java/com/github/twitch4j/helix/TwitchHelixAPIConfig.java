package com.github.twitch4j.helix;

import com.github.philippheuer.credentialmanager.domain.OAuth2Credential;
import com.github.twitch4j.common.config.ProxyConfig;
import com.github.twitch4j.common.config.Twitch4JGlobal;
import com.github.twitch4j.common.util.ThreadUtils;
import feign.Logger;
import io.github.bucket4j.Bandwidth;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.apache.commons.lang3.RandomStringUtils;

import java.time.Duration;
import java.util.Objects;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.function.Consumer;

@Accessors(chain = true, fluent = true, prefix = "")
@Setter
@Getter
public class TwitchHelixAPIConfig {
    /**
     * The official base URL used by production Twitch Helix API servers.
     */
    public static final String OFFICIAL_BASE_URL = "https://api.twitch.tv/helix";

    /**
     * The default URL used by the Mock API server generated by the Twitch CLI.
     *
     * @see <a href="https://github.com/twitchdev/twitch-cli/blob/main/docs/mock-api.md">Mock API Docs</a>
     */
    public static final String MOCK_BASE_URL = "http://localhost:8080/mock";

    /**
     * @see <a href="https://dev.twitch.tv/docs/api/guide#rate-limits">Helix Rate Limit Reference</a>
     */
    public static final Bandwidth DEFAULT_BANDWIDTH = Bandwidth.simple(800, Duration.ofMinutes(1));

    public static TwitchHelixAPIConfig process(Consumer<TwitchHelixAPIConfig> spec) {
        TwitchHelixAPIConfig data = new TwitchHelixAPIConfig();
        spec.accept(data);
        data.validate();
        return data;
    }

    /**
     * validate the config
     */
    public void validate() {
        Objects.requireNonNull(baseUrl, "baseUrl may not be null!");

        // scheduledThreadPoolExecutor is required
        if (scheduledThreadPoolExecutor == null)
            scheduledThreadPoolExecutor = ThreadUtils.getDefaultScheduledThreadPoolExecutor("twitch4j-" + RandomStringUtils.random(4, true, true), 1);

        // Enforce non-null rate limit bandwidth
        if (apiRateLimit == null)
            apiRateLimit = DEFAULT_BANDWIDTH;
    }

    /**
     * Client Id
     */
    private String clientId = Twitch4JGlobal.clientId;

    /**
     * Client Secret
     */
    private String clientSecret = Twitch4JGlobal.clientSecret;

    /**
     * User Agent
     */
    private String userAgent = Twitch4JGlobal.userAgent;

    /**
     * Default Auth Token for API Requests
     */
    private OAuth2Credential defaultAuthToken = null;

    /**
     * HTTP Request Queue Size
     */
    private Integer requestQueueSize = -1;

    /**
     * BaseUrl
     */
    private String baseUrl = OFFICIAL_BASE_URL;

    /**
     * Default Timeout
     */
    private Integer timeout = 5000;

    /**
     * you can overwrite the feign loglevel to print the full requests + responses if needed
     */
    private Logger.Level logLevel = Logger.Level.NONE;

    /**
     * Proxy Configuration
     */
    private ProxyConfig proxyConfig = null;

    /**
     * Scheduler Thread Pool Executor
     */
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = null;

    /**
     * Custom Rate Limit to use for Helix calls
     */
    private Bandwidth apiRateLimit = DEFAULT_BANDWIDTH;

}

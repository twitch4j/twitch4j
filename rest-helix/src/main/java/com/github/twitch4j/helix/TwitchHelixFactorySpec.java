package com.github.twitch4j.helix;

import com.github.philippheuer.credentialmanager.domain.OAuth2Credential;
import com.github.twitch4j.common.config.Twitch4JGlobal;
import com.github.twitch4j.common.spec.ModuleSpec;
import feign.Logger;
import io.github.bucket4j.Bandwidth;
import lombok.AccessLevel;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.time.Duration;
import java.util.Objects;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.function.Consumer;

/**
 * A specification to construct a {@link TwitchHelix} instance.
 */
@Data
@EqualsAndHashCode(callSuper = true)
@Accessors(fluent = true)
@NoArgsConstructor(access = AccessLevel.PRIVATE, force = true)
@ApiStatus.Experimental
public final class TwitchHelixFactorySpec<T> extends ModuleSpec<TwitchHelixFactorySpec<T>> {

    /**
     * The official base URL used by production Twitch Helix API servers.
     */
    public static final String OFFICIAL_BASE_URL = "https://api.twitch.tv/helix";

    /**
     * The default URL used by the Mock API server generated by the Twitch CLI.
     *
     * @see <a href="https://github.com/twitchdev/twitch-cli/blob/main/docs/mock-api.md">Mock API Docs</a>
     */
    public static final String MOCK_BASE_URL = "http://localhost:8080/mock";

    /**
     * The name of the backend
     */
    @NotNull
    private String backendName = "twitch-helix";

    /**
     * The API interface to use
     */
    @NotNull
    private Class<T> api;

    /**
     * The api base URL
     */
    @NotNull
    private String baseUrl = OFFICIAL_BASE_URL;

    /**
     * Client Id
     */
    @NotNull
    private String clientId = Twitch4JGlobal.clientId;

    /**
     * Client Secret
     */
    @Nullable
    private String clientSecret = Twitch4JGlobal.clientSecret;

    /**
     * User Agent
     */
    @NotNull
    private String userAgent = Twitch4JGlobal.userAgent;

    /**
     * Default Auth Token for API Requests
     */
    @Nullable
    private OAuth2Credential defaultAuthToken = null;

    /**
     * HTTP Request Queue Size
     */
    @NotNull
    private Integer requestQueueSize = -1;

    /**
     * Default Timeout
     */
    @NotNull
    private Integer timeout = 5000;

    /**
     * you can overwrite the feign loglevel to print the full requests + responses if needed
     */
    @NotNull
    private Logger.Level logLevel = Logger.Level.NONE;

    /**
     * Scheduler Thread Pool Executor
     */
    @NotNull
    private ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;

    /**
     * Custom Rate Limit to use for Helix calls
     * <p>
     * @see <a href="https://dev.twitch.tv/docs/api/guide#rate-limits">Helix Rate Limit Reference</a> for more information
     */
    @NotNull
    private Bandwidth apiRateLimit = Bandwidth.simple(800, Duration.ofMinutes(1));

    /**
     * Constructs a validated implementation of {@link TwitchHelixFactorySpec}.
     *
     * @param spec the specification to process
     */
    @ApiStatus.Internal
    public TwitchHelixFactorySpec(@NotNull Consumer<TwitchHelixFactorySpec<T>> spec) {
        spec.accept(this);
        validate();
    }

    /**
     * Ensures the configured specification is valid.
     *
     * @throws NullPointerException
     */
    public void validate() {
        Objects.requireNonNull(backendName, "backendName must not be null");
        Objects.requireNonNull(api, "api must not be null");
        Objects.requireNonNull(baseUrl, "baseUrl must not be null");
        if (baseUrl.isEmpty()) {
            throw new IllegalArgumentException("baseUrl must not be empty");
        }
        Objects.requireNonNull(clientId, "clientId must not be null");
        Objects.requireNonNull(userAgent, "userAgent must not be null");
        Objects.requireNonNull(requestQueueSize, "requestQueueSize must not be null");
        Objects.requireNonNull(timeout, "timeout must not be null");
        Objects.requireNonNull(logLevel, "logLevel must not be null");
        if (scheduledThreadPoolExecutor == null) {
            scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
        }
        Objects.requireNonNull(apiRateLimit, "apiRateLimit must not be null");
    }

    public void applySpec(TwitchHelixFactorySpec<?> spec) {
        this.backendName = spec.backendName;
        this.baseUrl = spec.baseUrl;
        this.clientId = spec.clientId;
        this.clientSecret = spec.clientSecret;
        this.userAgent = spec.userAgent;
        this.defaultAuthToken = spec.defaultAuthToken;
        this.requestQueueSize = spec.requestQueueSize;
        this.timeout = spec.timeout;
        this.logLevel = spec.logLevel;
        this.proxy = spec.proxy;
        this.scheduledThreadPoolExecutor = spec.scheduledThreadPoolExecutor;
        this.apiRateLimit = spec.apiRateLimit;
    }
}
